// Global
$black:        #000 !default;
$darkgray:     #333;
$midgray:      #666;
$gray:         #adb8c1;
$lightgray:    #f6f6f6;
$lightergray:  #e0e0e0;
$white:        #fff !default;

$navy:         #0c304a;
$blue:         #304e64;
$darkblue:     #004576;
$borderblue:   #7399b7;
$midblue:      #366996;
$lightblue:    #82a1bd;
$lighterblue:  #359aec;
$paleblue:     #f2f5f8;
$lightestblue: #e1eaf5;

$brand:        $darkblue;
$highlight:    $lighterblue;

// Rem
$baseline-px:  16px;

@mixin rem($property, $px-values) {
  $baseline-rem: $baseline-px / 1rem;
  #{$property}: $px-values;
  @if type-of($px-values) == 'number' {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    $rem-values: unquote('');
    @each $value in $px-values {
      @if $value == 0 or type-of($value) == 'string' or type-of($value) == 'color' {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    #{$property}: $rem-values;
  }
}

// Media queries
@mixin breakpoint($point) {
  @if $point == wide {
    @media screen and (min-width: 1099px) {
      & {
        @content;
      }
    }
  }
  @else if $point == desktop {
    @media screen and (min-width: 769px) {
      & {
        @content;
      }
    }
  }
  @else if $point == tablet {
    @media screen and (min-width: 481px){
      & {
        @content;
      }
    }
  }
  // Not required, but useful to styling out IE8
  @else if $point == mobile {
    @media screen and (max-width: 480px) {
      & {
        @content;
      }
    }
  }
  @else if $point == height-smallest {
    @media screen and (min-height: 640px) {
      & {
        @content;
      }
    }
  }
  @else if $point == height-small {
    @media screen and (min-height: 740px) {
      & {
        @content;
      }
    }
  }
  @else if $point == height-medium {
    @media screen and (min-height: 850px) {
      & {
        @content;
      }
    }
  }
  @else if $point == height-big {
    @media screen and (min-height: 1200px) {
      & {
        @content;
      }
    }
  }
  @else {
    @media screen and (min-width: $point) {
      & {
        @content;
      }
    }
  }
}

// Wrapper
%wrapper {
  @include rem(max-width, 1400px);
  @include rem(padding, 15px);
  margin: 0 auto;
}

%imgreplace {
  background-color: transparent;
  background-position: top center;
  background-repeat: no-repeat;
  background-size: cover;
}

// X-axis translation
@mixin translateX($d) {
  -webkit-transform:  translate3d($d,0,0);
  -moz-transform:     translate3d($d,0,0);
  -ms-transform:      translate3d($d,0,0);
  transform:          translate3d($d,0,0);
  -webkit-transition: -webkit-transform .3s ease;
  -moz-transition:    -moz-transform .3s ease;
  -ms-transition:     -ms-transform .3s ease;
  transition:         transform .3s ease;
}
